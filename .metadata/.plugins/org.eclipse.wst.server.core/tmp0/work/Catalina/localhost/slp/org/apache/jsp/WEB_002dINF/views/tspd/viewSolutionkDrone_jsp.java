/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.0.18
 * Generated at: 2017-08-09 16:03:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.tspd;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class viewSolutionkDrone_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private javax.el.ExpressionFactory _el_expressionfactory;
  private org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public void _jspInit() {
    _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
    _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
        throws java.io.IOException, javax.servlet.ServletException {

final java.lang.String _jspx_method = request.getMethod();
if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
return;
}

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("<div id=\"page-wrapper\">\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div class=\"col-lg-12\">\r\n");
      out.write("\t\t\t<h1 class=\"page-header\">TSPD Solution</h1>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"row\"> \r\n");
      out.write("\t\t<button class=\"btn btn-primary\" onclick=\"view_tspdls_solution();\">TSPD-LS</button>\r\n");
      out.write("\t\t<button class=\"btn btn-primary\" onclick=\"view_grasp_solution();\">GRASP</button>\r\n");
      out.write("\t\t<button class=\"btn btn-warning\" id=\"buttonChangePolyline\" onclick=\"hireNormalPolyline();\">Hire</button>\r\n");
      out.write("\t\t<a class=\"btn btn-primary col-sm-offset-8 \" onclick=\"saveSolution(this);\">Save Solution</a>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<div class=\"row\">\r\n");
      out.write("\t\t<div id=\"map\" style=\"height:100%\"></div>\r\n");
      out.write("\t</div>\r\n");
      out.write("\t\r\n");
      out.write("</div>\r\n");
      out.write("\r\n");
      out.write("<script async defer src=\"https://maps.googleapis.com/maps/api/js?key=AIzaSyDEXgYFE4flSYrNfeA7VKljWB_IhrDwxL4&callback=initMap&sensor=true&libraries=geometry\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("var map;\r\n");
      out.write("var dataResponse = JSON.parse('");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${sol}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("');\r\n");
      out.write("var tours=dataResponse.tours\r\n");
      out.write("console.log(tours);\r\n");
      out.write("var markerDrone=[];\r\n");
      out.write("var makerTruck;\r\n");
      out.write("var algo=0;\r\n");
      out.write("var directionsService ;\r\n");
      out.write("var stateBotNormalPolyline=0;\r\n");
      out.write("function saveSolution(view){\r\n");
      out.write("\tconsole.log(\"here\");\r\n");
      out.write("\tsave_data = \"text/json;charset=utf-8,\" + encodeURIComponent(JSON.stringify(dataResponse));\r\n");
      out.write("\tconsole.log(save_data);\r\n");
      out.write("\tview.setAttribute(\"href\", \"data:\"+save_data);\r\n");
      out.write("    view.setAttribute(\"download\", \"solution.json\");\r\n");
      out.write("    //window.location = baseUrl + \"/tsp-drone/tspd-solve-home\";\r\n");
      out.write("}\r\n");
      out.write("function hireNormalPolyline(){\r\n");
      out.write("\tconsole.log(stateBotNormalPolyline);\r\n");
      out.write("\tif(stateBotNormalPolyline==0) {\r\n");
      out.write("\t\t$( \"#buttonChangePolyline\" ).removeClass( \"btn-warning\" );\r\n");
      out.write("\t\t$( \"#buttonChangePolyline\" ).addClass( \"btn-error\" );\r\n");
      out.write("        $(\"#buttonChangePolyline\").text(\"View\");\r\n");
      out.write("\t\tpolylineNormal.setMap(null);\r\n");
      out.write("\t} else {\r\n");
      out.write("\t\t$( \"#buttonChangePolyline\" ).removeClass( \"btn-error\" );\r\n");
      out.write("\t\t$( \"#buttonChangePolyline\" ).addClass( \"btn-warning\" );\r\n");
      out.write("\t\t$(\"#buttonChangePolyline\").text(\"Hide\");\r\n");
      out.write("\t\tpolylineNormal.setMap(map);\r\n");
      out.write("\t}\r\n");
      out.write("\tstateBotNormalPolyline=(stateBotNormalPolyline+1)%2;\r\n");
      out.write("}\r\n");
      out.write("function initMap(){\r\n");
      out.write("\tmap = new google.maps.Map(document.getElementById('map'),{\r\n");
      out.write("\t\tcenter: {lat:21.03, lng:105.8},\r\n");
      out.write("\t\tzoom: 12\r\n");
      out.write("\t});\r\n");
      out.write("\tdirectionsService = new google.maps.DirectionsService();\r\n");
      out.write("\tgoogle.maps.LatLng.prototype.distanceFrom = function(newLatLng) {\r\n");
      out.write("\t\tvar EarthRadiusMeters = 6378137.0; // meters\r\n");
      out.write("\t\tvar lat1 = this.lat();\r\n");
      out.write("\t\tvar lon1 = this.lng();\r\n");
      out.write("\t\tvar lat2 = newLatLng.lat();\r\n");
      out.write("\t\tvar lon2 = newLatLng.lng();\r\n");
      out.write("\t\tvar dLat = (lat2-lat1) * Math.PI / 180;\r\n");
      out.write("\t\tvar dLon = (lon2-lon1) * Math.PI / 180;\r\n");
      out.write("\t\tvar a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n");
      out.write("\t\tMath.cos(lat1 * Math.PI / 180 ) * Math.cos(lat2 * Math.PI / 180 ) *\r\n");
      out.write("\t\tMath.sin(dLon/2) * Math.sin(dLon/2);\r\n");
      out.write("\t\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n");
      out.write("\t\tvar d = EarthRadiusMeters * c;\r\n");
      out.write("\t\treturn d;\r\n");
      out.write("\t}\r\n");
      out.write("\tgoogle.maps.Polygon.prototype.Distance = function(){\r\n");
      out.write("\t\tvar distance =0;\r\n");
      out.write("\t\tfor(var i=1; i< this.getPath().getLength(); i++){\r\n");
      out.write("\t\t\tdistance += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i-1));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn distance;\r\n");
      out.write("\t}\r\n");
      out.write("\tgoogle.maps.Polygon.prototype.GetPointAtDistance = function(metres) {\r\n");
      out.write("\t\t\r\n");
      out.write("\t    if (metres == 0) return this.getPath().getAt(0);  \r\n");
      out.write("\t    if (metres < 0) return null;\r\n");
      out.write("\t    if (this.getPath().getLength() < 2) return null;\r\n");
      out.write("\t    var dist=0;\r\n");
      out.write("\t    var olddist=0;\r\n");
      out.write("\t    for (var i=1; (i < this.getPath().getLength() && dist < metres); i++) {\r\n");
      out.write("\t\t\tolddist = dist;\r\n");
      out.write("\t\t\tdist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i-1));\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tif (dist < metres) {\r\n");
      out.write("\t\t\tdist=metres+10;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tvar p1= this.getPath().getAt(i-2);\r\n");
      out.write("\t\tvar p2= this.getPath().getAt(i-1);\r\n");
      out.write("\t\tvar m = (metres-olddist)/(dist-olddist);\r\n");
      out.write("\t\treturn [new google.maps.LatLng( p1.lat() + (p2.lat()-p1.lat())*m, p1.lng() + (p2.lng()-p1.lng())*m),this.getPath().getAt(i-1).isWayPoint];\r\n");
      out.write("\t}\r\n");
      out.write("\r\n");
      out.write("\t/* Prototype cá»§a cÃ¡c hÃ m */\r\n");
      out.write("\tgoogle.maps.Polyline.prototype.Distance             = google.maps.Polygon.prototype.Distance;\r\n");
      out.write("\tgoogle.maps.Polyline.prototype.GetPointAtDistance   = google.maps.Polygon.prototype.GetPointAtDistance;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function view_tspdls_solution(){\r\n");
      out.write("\talgo+=1;\r\n");
      out.write("\tinitMap();\r\n");
      out.write("\tvar tour_tspdls = tours[0];\r\n");
      out.write("\tview_tour(tour_tspdls);\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function view_grasp_solution(){\r\n");
      out.write("\talgo+=1;\r\n");
      out.write("\tinitMap();\r\n");
      out.write("\tvar tour_grasp = tours[1];\r\n");
      out.write("\tview_tour(tour_grasp);\r\n");
      out.write("}\r\n");
      out.write("var truckTour;\r\n");
      out.write("var droneDeliveries ;\r\n");
      out.write("var dr=[];\r\n");
      out.write("var dl=[];\r\n");
      out.write("var markerTruckTour=[];\r\n");
      out.write("var polylineNormal;\r\n");
      out.write("function view_tour(data){\r\n");
      out.write("\tmarkerTruckTour=[];\r\n");
      out.write("\ttruckTour = data.td.truck_tour;\r\n");
      out.write("\tdroneDeliveries = data.dd;\r\n");
      out.write("\tvar lineSymbol = {path: google.maps.SymbolPath.FORWARD_CLOSED_ARROW};\r\n");
      out.write("\tpolylineNormal=new google.maps.Polyline({\r\n");
      out.write("\t\tstrokeColor: '#096D9F',\r\n");
      out.write("\t    strokeOpacity: 0.5,\r\n");
      out.write("\t    strokeWeight: 2,\r\n");
      out.write("\t    icons: [{\r\n");
      out.write("\t\t\ticon: lineSymbol,\r\n");
      out.write("\t\t\toffset: '100%',\r\n");
      out.write("\t\t\trepeat: '200px'\r\n");
      out.write("\t\t}]\r\n");
      out.write("\t});\r\n");
      out.write("\tfor(var j=0;j<truckTour.length;j++){\r\n");
      out.write("\t\ttruckTour[j].obLauch_nodes=[];\r\n");
      out.write("\t\ttruckTour[j].obRendezvous_nodes=[];\r\n");
      out.write("\t}\r\n");
      out.write("\tfor(var i=0;i<droneDeliveries.length;i++){\r\n");
      out.write("\t\tdroneDeliveries[i].id=i;\r\n");
      out.write("\t}\r\n");
      out.write("\tfor(var i=0;i<droneDeliveries.length;i++){\r\n");
      out.write("\t\tfor(var j=0;j<truckTour.length;j++){\r\n");
      out.write("\t\t\tif(truckTour[j].id==droneDeliveries[i].lauch_node.id){\r\n");
      out.write("\t\t\t\ttruckTour[j].obLauch_nodes.push(droneDeliveries[i]);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tif(truckTour[j].id==droneDeliveries[i].rendezvous_node.id){\r\n");
      out.write("\t\t\t\ttruckTour[j].obRendezvous_nodes.push(droneDeliveries[i]);\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfor(var i=0;i<4;i++)\r\n");
      out.write("\t\tmarkerDrone.push(new google.maps.Marker({\r\n");
      out.write("\t\t\ticon : baseUrl+\"/assets/icon/drone-icon.png\",\r\n");
      out.write("\t\t\tposition : null,\r\n");
      out.write("\t\t\tspeed: dataResponse.droneSpeed,\r\n");
      out.write("\t\t\tisDrone: true,\r\n");
      out.write("\t\t\tdelivery:-1,\r\n");
      out.write("\t\t\tisRunning: false\r\n");
      out.write("\t\t}));\r\n");
      out.write("\tmarkerTruck = new google.maps.Marker({\r\n");
      out.write("\t\ticon : \"https://maps.gstatic.com/mapfiles/ms2/micons/truck.png\",\r\n");
      out.write("\t\tposition : null,\r\n");
      out.write("\t\tspeed: dataResponse.truckSpeed,\r\n");
      out.write("\t\tisDrone: false\r\n");
      out.write("\t});\r\n");
      out.write("\tfor(var i=0;i<droneDeliveries.length;i++){\r\n");
      out.write("\t\tvar pi = new google.maps.Marker({\r\n");
      out.write("\t\t\ticon : \"https://www.google.com/mapfiles/marker_yellow.png\",\r\n");
      out.write("\t\t\tposition : new google.maps.LatLng(droneDeliveries[i].drone_node.lat,droneDeliveries[i].drone_node.lng),\r\n");
      out.write("\t\t\tinfowindow: new google.maps.InfoWindow({ content:\"\"+ droneDeliveries[i].drone_node.id })\r\n");
      out.write("\t\t})\r\n");
      out.write("\t\tpi.setMap(map);\r\n");
      out.write("\t\tpi.addListener('click', function() {\r\n");
      out.write("\t          this.infowindow.open(map, this);\r\n");
      out.write("\t    });\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("\tfor(var i=0;i<truckTour.length;i++){\r\n");
      out.write("\t\tdr[i]=0;\r\n");
      out.write("\t\tdl[i]=0;\r\n");
      out.write("\t}\r\n");
      out.write("\trunTruck(new google.maps.LatLng(truckTour[0].lat,truckTour[0].lng),new google.maps.LatLng(truckTour[truckTour.length-1].lat,truckTour[truckTour.length-1].lng));\r\n");
      out.write("\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function runTruck(start,end){\r\n");
      out.write("\tset(start,end,markerTruck);\r\n");
      out.write("}\r\n");
      out.write("function distance2point(lat1,lon1 ,lat2,lon2){\r\n");
      out.write("\tvar EarthRadiusMeters = 6378137.0; // meters\r\n");
      out.write("\tvar dLat = (lat2-lat1) * Math.PI / 180;\r\n");
      out.write("\tvar dLon = (lon2-lon1) * Math.PI / 180;\r\n");
      out.write("\tvar a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n");
      out.write("\tMath.cos(lat1 * Math.PI / 180 ) * Math.cos(lat2 * Math.PI / 180 ) *\r\n");
      out.write("\tMath.sin(dLon/2) * Math.sin(dLon/2);\r\n");
      out.write("\tvar c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n");
      out.write("\tvar d = EarthRadiusMeters * c;\r\n");
      out.write("\treturn d;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function runDrone(lauch,drone,rendezvous,c,id,marker){\r\n");
      out.write("\tdl[c]=1;\r\n");
      out.write("\tmarker.isRunning=true;\r\n");
      out.write("\tmarker.setMap(map);\r\n");
      out.write("\tmarker.delivery=id;\r\n");
      out.write("\tvar polyline = new google.maps.Polyline({\r\n");
      out.write("\t\t\t\t\tpath: [],\r\n");
      out.write("\t\t\t\t\tstrokeColor: '#FF0000'\r\n");
      out.write("\t});\r\n");
      out.write("\tpolyline.getPath().push(new google.maps.LatLng(lauch.lat,lauch.lng));\r\n");
      out.write("\tpolyline.getPath().push(new google.maps.LatLng(drone.lat,drone.lng));\r\n");
      out.write("\tpolyline.getPath().push(new google.maps.LatLng(rendezvous.lat,rendezvous.lng));\r\n");
      out.write("\tpolyline.setMap(map);\r\n");
      out.write("\tstartAnimation(marker, polyline, new google.maps.LatLng(rendezvous.lat,rendezvous.lng),algo)\r\n");
      out.write("\r\n");
      out.write("}\r\n");
      out.write("var storeReq=null;\r\n");
      out.write("function set(start,end,marker){\t\r\n");
      out.write("\tmarker.setPosition(start);\r\n");
      out.write("\tmarker.setMap(map);\r\n");
      out.write("\tvar waypoints=[]\r\n");
      out.write("\t\r\n");
      out.write("\tvar polyLine = new google.maps.Polyline({\r\n");
      out.write("\t\tpath: [],\r\n");
      out.write("\t\tstrokeColor: '#1A9D51',\r\n");
      out.write("\t\tstrokeOpacity: 0.7,\r\n");
      out.write("\t    strokeWeight: 3\r\n");
      out.write("\t});\t\r\n");
      out.write("\t\r\n");
      out.write("\tcalculateAndDisplay(1,start,end,marker,polyLine,waypoints);\r\n");
      out.write("}\r\n");
      out.write("var sucQDir=false;\r\n");
      out.write("function storeResponce(request,polyLine){\r\n");
      out.write("\tvar display=function(rep, status){\r\n");
      out.write("\t\tif(status == google.maps.DirectionsStatus.OK){\r\n");
      out.write("\t\t\tvar legs = rep.routes[0].legs;   \r\n");
      out.write("\t\t\tfor(var h=0; h<legs.length; h++){\t\t\t\r\n");
      out.write("\t\t\t\tvar steps = legs[h].steps;\r\n");
      out.write("\t\t\t\tpolylineNormal.getPath().push(legs[h].start_location)\r\n");
      out.write("\t\t\t\tvar marker_z = new google.maps.Marker({\r\n");
      out.write("\t\t\t\t\tposition : legs[h].start_location,\r\n");
      out.write("\t\t\t\t\tlabel:labels[markerTruckTour.length % labels.length],\r\n");
      out.write("\t\t\t\t\tmap: map\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tmarkerTruckTour.push(marker_z);\r\n");
      out.write("\t\t\t\tlegs[h].start_location.isWayPoint=markerTruckTour.length-1;\r\n");
      out.write("\t\t\t\tpolyLine.getPath().push(legs[h].start_location);\r\n");
      out.write("\t\t\t\tfor(var j = 0; j < steps.length; j++){\r\n");
      out.write("\t\t\t\t\tvar nextPoint = steps[j].path;  \t\t\t\r\n");
      out.write("\t\t\t\t\tfor(var k = 0; k < nextPoint.length; k++){\r\n");
      out.write("\t\t\t\t\t\tif(j==0&& k==0) continue;\r\n");
      out.write("\t\t\t\t\t\tnextPoint[k].isWayPoint=markerTruckTour.length-1;\r\n");
      out.write("\t\t\t\t\t\tpolyLine.getPath().push(nextPoint[k]); \t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tsucQDir=true;\r\n");
      out.write("\t};\r\n");
      out.write("\tdirectionsService.route(request, display);\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function lastReq(marker,end,request,polyLine){\r\n");
      out.write("\t\r\n");
      out.write("\tvar display=function(rep, status){\r\n");
      out.write("\t\tif(status == google.maps.DirectionsStatus.OK){\r\n");
      out.write("\t\r\n");
      out.write("\t\t\tvar legs = rep.routes[0].legs;   \r\n");
      out.write("\t\t\tfor(var h=0; h<legs.length; h++){\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar steps = legs[h].steps;\r\n");
      out.write("\t\t\t\tpolylineNormal.getPath().push(legs[h].start_location)\r\n");
      out.write("\t\t\t\tvar marker_z = new google.maps.Marker({\r\n");
      out.write("\t\t\t\t\tposition : legs[h].start_location,\r\n");
      out.write("\t\t\t\t\tlabel:labels[markerTruckTour.length % labels.length],\r\n");
      out.write("\t\t\t\t\tmap: map\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\tmarkerTruckTour.push(marker_z);\r\n");
      out.write("\t\t\t\tlegs[h].start_location.isWayPoint=markerTruckTour.length-1;\r\n");
      out.write("\t\t\t\tpolyLine.getPath().push(legs[h].start_location);\r\n");
      out.write("\t\t\t\tfor(var j = 0; j < steps.length; j++){\r\n");
      out.write("\t\t\t\t\tvar nextPoint = steps[j].path;  \t\t\t\r\n");
      out.write("\t\t\t\t\tfor(var k = 0; k < nextPoint.length; k++){\r\n");
      out.write("\t\t\t\t\t\tif(j==0&& k==0) continue;\r\n");
      out.write("\t\t\t\t\t\tnextPoint[k].isWayPoint=markerTruckTour.length-1;\r\n");
      out.write("\t\t\t\t\t\tpolyLine.getPath().push(nextPoint[k]); \t\t\r\n");
      out.write("\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\tpolyLine.setMap(map);\r\n");
      out.write("\t\tpolylineNormal.getPath().push(end);\r\n");
      out.write("\t\tpolylineNormal.setMap(map);\r\n");
      out.write("\t\tstartAnimation(marker,polyLine,end,algo);\t\r\n");
      out.write("\t};\r\n");
      out.write("\t\r\n");
      out.write("\tdirectionsService.route(request, display);\r\n");
      out.write("}\r\n");
      out.write("var labels = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\r\n");
      out.write("\r\n");
      out.write("function calculateAndDisplay(i,start, end, marker,polyLine,waypoints){\r\n");
      out.write("\tif(i %22==0 || i>=truckTour.length-1){\r\n");
      out.write("\t\t\tvar request = {\r\n");
      out.write("\t\t\t\torigin: start,\r\n");
      out.write("\t\t\t\tdestination: new google.maps.LatLng(truckTour[i].lat,truckTour[i].lng),\r\n");
      out.write("\t\t\t\twaypoints:waypoints,\t\r\n");
      out.write("\t\t\t\ttravelMode: google.maps.DirectionsTravelMode.DRIVING\r\n");
      out.write("\t\t\t};\r\n");
      out.write("\t\t\tsucQDir=false;\t\r\n");
      out.write("\t\t\tif(i>=truckTour.length-1){\r\n");
      out.write("\t\t\t\tlastReq(marker,end,request,polyLine);\r\n");
      out.write("\t\t\t\treturn;\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tstoreResponce(request,polyLine);\r\n");
      out.write("\t\t\tmove = function( wait,i) {\r\n");
      out.write("        \t\tif(sucQDir==false) {\r\n");
      out.write("\t          \t\tsetTimeout(function() { \r\n");
      out.write("\t            \t\tmove(wait,i); \r\n");
      out.write("\t          \t\t}, wait);\r\n");
      out.write("        \t\t} else{\r\n");
      out.write("        \t\t\tstart= new google.maps.LatLng(truckTour[i].lat,truckTour[i].lng);\r\n");
      out.write("        \t\t\twaypoints=[];\r\n");
      out.write("        \t\t\tcalculateAndDisplay(i+1,start, end, marker,polyLine,waypoints);\r\n");
      out.write("        \t\t\treturn\r\n");
      out.write("        \t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tmove(10,i);\r\n");
      out.write("\t\t} else {\r\n");
      out.write("\t\t\twaypoints.push({\r\n");
      out.write("\t            location:new google.maps.LatLng(truckTour[i].lat,truckTour[i].lng),\r\n");
      out.write("\t            stopover: true\r\n");
      out.write("\t  \t\t});\r\n");
      out.write("\t\t\tcalculateAndDisplay(i+1,start, end, marker,polyLine,waypoints);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function startAnimation(marker,polyLine,end,malgo){\r\n");
      out.write("\tvar step = marker.speed;\r\n");
      out.write("\tdistance = polyLine.Distance();\r\n");
      out.write("\tsetTimeout(function(){\r\n");
      out.write("\t\tanimate(marker,1,step,distance,polyLine,end,malgo);\r\n");
      out.write("\t}, 100);\r\n");
      out.write("}\r\n");
      out.write("function getListRendezvousOf(t){\r\n");
      out.write("\tvar lrn=truckTour[t].obRendezvous_nodes;\r\n");
      out.write("\treturn lrn;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function getListLauchOf(t){\r\n");
      out.write("\tvar lln=truckTour[t].obLauch_nodes;\r\n");
      out.write("\treturn lln;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function clearDroneisRendezvoused(t){\r\n");
      out.write("\tvar lrn=getListRendezvousOf(t);\r\n");
      out.write("\tfor(var i=0;i<markerDrone.length;i++)\r\n");
      out.write("\t\tfor(var j=0;j<lrn.length;j++) \r\n");
      out.write("\t\t\tif(markerDrone[i].delivery==lrn[j].id){\r\n");
      out.write("\t\t\t\tif(markerDrone[i].isRunning==false){\r\n");
      out.write("\t\t\t\t\tmarkerDrone[i].setMap(null);\r\n");
      out.write("\t\t\t\t\tmarkerDrone[i].delivery=-1;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("function checkRunningOf(t){\r\n");
      out.write("\tvar lrn=getListRendezvousOf(t);\r\n");
      out.write("\tfor(var i=0;i<markerDrone.length;i++)\r\n");
      out.write("\t\tfor(var j=0;j<lrn.length;j++) \r\n");
      out.write("\t\t\tif(markerDrone[i].delivery==lrn[j].id){\r\n");
      out.write("\t\t\t\tif(markerDrone[i].isRunning==true){\r\n");
      out.write("\t\t\t\t\treturn true;\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\treturn false;\r\n");
      out.write("}\r\n");
      out.write("function animate(marker,d,step,distance,polyLine,end,malgo){\r\n");
      out.write("\tif(d > distance || malgo!=algo){\r\n");
      out.write("\t\tmarker.setPosition(end);\r\n");
      out.write("\t\tif (marker.isDrone==true) {\r\n");
      out.write("\t\t\tmarker.isRunning=false;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\treturn;\r\n");
      out.write("\t}\r\n");
      out.write("\tvar p;\r\n");
      out.write("\tvar t;\r\n");
      out.write("\t//console.log(malgo+\" \"+marker.isDrone);\r\n");
      out.write("\tconsole.log(marker.isDrone+\" \"+polyLine.GetPointAtDistance(d));\r\n");
      out.write("\t[p,t] = polyLine.GetPointAtDistance(d);\r\n");
      out.write("\tmarker.setPosition(p);\r\n");
      out.write("\tif(t!=-1 && t!= undefined ) {\r\n");
      out.write("\t\tif(truckTour[t].obRendezvous_nodes.length>0 && marker.isDrone==false && dr[t]==0){\r\n");
      out.write("\t\t\tmove = function( wait) {\r\n");
      out.write("        \t\tif(checkRunningOf(t)==true) {\r\n");
      out.write("        \t\t\tclearDroneisRendezvoused(t);\r\n");
      out.write("\t          \t\tsetTimeout(function() { \r\n");
      out.write("\t            \t\tmove(wait); \r\n");
      out.write("\t          \t\t}, wait);\r\n");
      out.write("        \t\t} else{\r\n");
      out.write("        \t\t\tclearDroneisRendezvoused(t);\r\n");
      out.write("        \t\t\tdr[t]=1;\r\n");
      out.write("        \t\t\tvar lln=getListLauchOf(t);\r\n");
      out.write("        \t\t\tconsole.log(lln);\r\n");
      out.write("        \t\t\tif( lln.length>0  && dl[t]==0 ){\r\n");
      out.write("        \t\t\t\tfor(var i=0;i<lln.length;i++){\r\n");
      out.write("        \t\t\t\t\tfor(var j=0;j<markerDrone.length;j++)\r\n");
      out.write("        \t\t\t\t\t\tif(markerDrone[j].isRunning==false && markerDrone[j].map==null){\r\n");
      out.write("        \t\t\t\t\t\t\trunDrone(lln[i].lauch_node,lln[i].drone_node,lln[i].rendezvous_node,t,lln[i].id,markerDrone[j]);\t\t\r\n");
      out.write("        \t\t\t\t\t\t\tbreak;\r\n");
      out.write("        \t\t\t\t\t\t}\r\n");
      out.write("        \t\t\t\t}\r\n");
      out.write("        \t\t\t\t\t\t\t\t\r\n");
      out.write("        \t\t\t} \r\n");
      out.write("        \t\t\tvar a = d + step;\r\n");
      out.write("        \t\t\tsetTimeout(function(){\r\n");
      out.write("        \t\t\t\tanimate(marker,a,step,distance,polyLine,end,malgo);\r\n");
      out.write("        \t\t\t}, 100);\r\n");
      out.write("        \t\t}\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tmove(1000);\r\n");
      out.write("\t\t}else{ \r\n");
      out.write("\t\t\tvar lln=getListLauchOf(t);\r\n");
      out.write("\t\t\tconsole.log(lln);\r\n");
      out.write("\t\t\tif(lln.length>0 && dl[t]==0 ){\r\n");
      out.write("\t\t\t\tfor(var i=0;i<lln.length;i++){\r\n");
      out.write("\t\t\t\t\tfor(var j=0;j<markerDrone.length;j++)\r\n");
      out.write("\t\t\t\t\t\tif(markerDrone[j].isRunning==false && markerDrone[j].map==null){\r\n");
      out.write("\t\t\t\t\t\t\trunDrone(lln[i].lauch_node,lln[i].drone_node,lln[i].rendezvous_node,t,lln[i].id,markerDrone[j]);\t\t\r\n");
      out.write("\t\t\t\t\t\t\tbreak;\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t\t}\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\tvar a = d + step;\r\n");
      out.write("\t\t\tsetTimeout(function(){\r\n");
      out.write("\t\t\t\tanimate(marker,a,step,distance,polyLine,end,malgo);\r\n");
      out.write("\t\t\t}, 100);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t} else{\r\n");
      out.write("\t\tvar a = d + step;\r\n");
      out.write("\t\tsetTimeout(function(){\r\n");
      out.write("\t\t\tanimate(marker,a,step,distance,polyLine,end,malgo);\r\n");
      out.write("\t\t}, 100);\r\n");
      out.write("\t}\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}

package ifi2017;

import java.io.File;
import java.util.ArrayList;
import java.util.Scanner;

import localsearch.constraints.basic.LessOrEqual;
import localsearch.constraints.basic.LessThan;
import localsearch.functions.conditionalsum.ConditionalSum;
import localsearch.model.ConstraintSystem;
import localsearch.model.IFunction;
import localsearch.model.LocalSearchManager;
import localsearch.model.VarIntLS;
import localsearch.search.TabuSearch;

public class BACP {
	// input
	int n;// number of courses
	int m;// number of periods
	int[] c;// c[i] number of credits of course i
	int minCourses;
	int maxCourses;
	int minCredits;
	int maxCredits;
	
	ArrayList<Integer> I; // I[k]
	ArrayList<Integer> J; // J[k]   
	
	// model
	LocalSearchManager mgr;
	VarIntLS[] x;
	ConstraintSystem S;// IConstraint
	IFunction[] nbCredits;// invariant: number of credits of periods
	IFunction[] nbCourses;// invariant: number of course of periods
	
	
	public void readData(String fn){
		try{
			Scanner in = new Scanner(new File(fn));
			n = in.nextInt();
			m = in.nextInt();
			minCredits = in.nextInt();
			maxCredits = in.nextInt();
			minCourses = in.nextInt();
			maxCourses = in.nextInt();
			c = new int[n];
			for(int i = 0; i < n; i++){
				c[i] = in.nextInt();
			}
			
			int K = in.nextInt();
			I = new ArrayList<Integer>();
			J = new ArrayList<Integer>();
			for(int k = 0; k < K; k++){
				int i = in.nextInt();
				int j = in.nextInt();
				I.add(i);
				J.add(j);
			}
			
			in.close();
		}catch(Exception ex){
			ex.printStackTrace();
		}
	}
	
	public void stateModel(){
		mgr = new LocalSearchManager();
		x = new VarIntLS[n];
		for(int i = 0; i < n; i++)
			x[i] = new VarIntLS(mgr,0,m-1);
		
		nbCredits = new IFunction[m];
		nbCourses = new IFunction[m];
		
		for(int p = 0; p < m; p++){
			nbCredits[p] = new ConditionalSum(x, c, p);
			nbCourses[p] = new ConditionalSum(x, p);
		}
		
		S = new ConstraintSystem(mgr);
		
		for(int p = 0; p < m; p++){
			S.post(new LessOrEqual(minCredits, nbCredits[p]));
			S.post(new LessOrEqual(nbCredits[p], maxCredits));
			
			S.post(new LessOrEqual(minCourses, nbCourses[p]));
			S.post(new LessOrEqual(nbCourses[p], maxCourses));
		}
		
		for(int k = 0; k < I.size(); k++){
			int i = I.get(k) - 1;
			int j = J.get(k) - 1;
			
			S.post(new LessThan(x[i], x[j]));
		}
		
		 
		mgr.close();
	}
	
	public void runStepByStep(){
		
	}
	public void search(){
		TabuSearch ts = new TabuSearch();
		ts.search(S, 50, 10, 100000, 200);
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		BACP bacp = new BACP();
		bacp.readData("data/BACP/bacp.in01");
		bacp.stateModel();
		bacp.search();
		
	}

}
